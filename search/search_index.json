{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"1. Equation of Motion A simple pendulum consists of a mass \\(m\\) attached to a string of length \\(L\\) , swinging under the influence of gravity. The equation governing its motion is: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{g}{L} \\sin\\theta = 0 \\] Where: - \\(\\theta\\) is the angular displacement (radians). \\(g\\) is the acceleration due to gravity ($ 9.8 $ m/s\u00b2). \\(L\\) is the length of the pendulum. The term \\(\\sin(\\theta)\\) accounts for the restoring torque due to gravity. This is a nonlinear second-order differential equation, making it difficult to solve analytically for large angles. 2. Small-Angle Approximation For small angles where $ \\theta \\approx \\sin(\\theta) $ (in radians), the equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{g}{L} \\theta = 0 \\] This is a linear second-order ordinary differential equation, similar to a simple harmonic oscillator. 3. Solution for the Simple Pendulum For small oscillations, the solution takes the form: \\[ \\theta (t) = \\theta_0 \\cos(\\omega t + \\phi) \\] Where: - \\(\\theta_0\\) is the initial amplitude. \\(\\phi\\) is the phase constant, determined by initial conditions. \\(\\omega\\) is the natural frequency of the pendulum, given by: \\[ \\omega = \\sqrt{\\frac{g}{L}} \\] 4. Energy of the Simple Pendulum The total mechanical energy $ E $ is the sum of kinetic and potential energy: \\[ E = T + U \\] Where: Kinetic Energy \\[ T = \\frac{1}{2} m L^2 \\left( \\frac{d\\theta}{dt} \\right)^2 \\] Potential Energy (measured from the lowest position) \\[ U = mgL(1 - \\cos\\theta) \\] The total energy remains constant for an ideal pendulum: \\[ E = \\frac{1}{2} m L^2 \\left( \\frac{d\\theta}{dt} \\right)^2 + mgL(1 - \\cos\\theta) \\] 5. Phase Space Representation A useful way to visualize pendulum motion is in phase space, plotting angular velocity $ \\dot{\\theta} $ against angular displacement $ \\theta $. The phase portrait shows closed curves for undamped motion, representing conservation of energy. 6. Frequency of Oscillations The period of oscillation $ T $ for small angles is given by: \\[ T = 2\\pi \\sqrt{\\frac{L}{g}} \\] For large amplitudes, the period must be corrected using elliptic integrals: \\[ T = 4 \\sqrt{\\frac{L}{g}} \\int_0^{\\pi/2} \\frac{d\\phi}{\\sqrt{1 - k^2 \\sin^2\\phi}} \\] where: \\[ k = \\sin\\left(\\frac{\\theta_0}{2}\\right) \\] For small oscillations, we can approximate: \\[ T \\approx 2\\pi \\sqrt{\\frac{L}{g}} \\left(1 + \\frac{1}{16} \\theta_0^2 + \\frac{11}{3072} \\theta_0^4 + \\dots\\right) \\] 7. Numerical Solution using Python Since the nonlinear equation: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{g}{L} \\sin(\\theta) = 0 \\] import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.8 # Gravity (m/s^2) L = 1.0 # Length of pendulum (m) t_span = (0, 10) # Time span for simulation initial_conditions = [np.pi / 4, 0] # Initial conditions: [theta(0), theta'(0)] # Differential equation for the simple pendulum def simple_pendulum(t, y): theta, theta_dot = y dtheta_dt = theta_dot dtheta_dot_dt = - (g / L) * np.sin(theta) return [dtheta_dt, dtheta_dot_dt] # Solve using Runge-Kutta method solution = solve_ivp(simple_pendulum, t_span, initial_conditions, t_eval=np.linspace(0, 10, 1000)) # Extract solution t = solution.t theta = solution.y[0] theta_dot = solution.y[1] # Plot Angular Displacement vs Time plt.figure(figsize=(10, 6)) plt.plot(t, theta, label=\"Theta (rad)\") plt.title(\"Simple Pendulum Motion\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angular Displacement (rad)\") plt.grid(True) plt.legend() plt.show() # Plot Phase Portrait plt.figure(figsize=(8, 6)) plt.plot(theta, theta_dot) plt.title(\"Phase Portrait of the Simple Pendulum\") plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Theta' (rad/s)\") plt.grid(True) plt.show(","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-equation-of-motion","text":"A simple pendulum consists of a mass \\(m\\) attached to a string of length \\(L\\) , swinging under the influence of gravity. The equation governing its motion is: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{g}{L} \\sin\\theta = 0 \\] Where: - \\(\\theta\\) is the angular displacement (radians). \\(g\\) is the acceleration due to gravity ($ 9.8 $ m/s\u00b2). \\(L\\) is the length of the pendulum. The term \\(\\sin(\\theta)\\) accounts for the restoring torque due to gravity. This is a nonlinear second-order differential equation, making it difficult to solve analytically for large angles.","title":"1. Equation of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-small-angle-approximation","text":"For small angles where $ \\theta \\approx \\sin(\\theta) $ (in radians), the equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{g}{L} \\theta = 0 \\] This is a linear second-order ordinary differential equation, similar to a simple harmonic oscillator.","title":"2. Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-solution-for-the-simple-pendulum","text":"For small oscillations, the solution takes the form: \\[ \\theta (t) = \\theta_0 \\cos(\\omega t + \\phi) \\] Where: - \\(\\theta_0\\) is the initial amplitude. \\(\\phi\\) is the phase constant, determined by initial conditions. \\(\\omega\\) is the natural frequency of the pendulum, given by: \\[ \\omega = \\sqrt{\\frac{g}{L}} \\]","title":"3. Solution for the Simple Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-energy-of-the-simple-pendulum","text":"The total mechanical energy $ E $ is the sum of kinetic and potential energy: \\[ E = T + U \\] Where:","title":"4. Energy of the Simple Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#kinetic-energy","text":"\\[ T = \\frac{1}{2} m L^2 \\left( \\frac{d\\theta}{dt} \\right)^2 \\]","title":"Kinetic Energy"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#potential-energy-measured-from-the-lowest-position","text":"\\[ U = mgL(1 - \\cos\\theta) \\] The total energy remains constant for an ideal pendulum: \\[ E = \\frac{1}{2} m L^2 \\left( \\frac{d\\theta}{dt} \\right)^2 + mgL(1 - \\cos\\theta) \\]","title":"Potential Energy (measured from the lowest position)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-phase-space-representation","text":"A useful way to visualize pendulum motion is in phase space, plotting angular velocity $ \\dot{\\theta} $ against angular displacement $ \\theta $. The phase portrait shows closed curves for undamped motion, representing conservation of energy.","title":"5. Phase Space Representation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#6-frequency-of-oscillations","text":"The period of oscillation $ T $ for small angles is given by: \\[ T = 2\\pi \\sqrt{\\frac{L}{g}} \\] For large amplitudes, the period must be corrected using elliptic integrals: \\[ T = 4 \\sqrt{\\frac{L}{g}} \\int_0^{\\pi/2} \\frac{d\\phi}{\\sqrt{1 - k^2 \\sin^2\\phi}} \\] where: \\[ k = \\sin\\left(\\frac{\\theta_0}{2}\\right) \\] For small oscillations, we can approximate: \\[ T \\approx 2\\pi \\sqrt{\\frac{L}{g}} \\left(1 + \\frac{1}{16} \\theta_0^2 + \\frac{11}{3072} \\theta_0^4 + \\dots\\right) \\]","title":"6. Frequency of Oscillations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#7-numerical-solution-using-python","text":"Since the nonlinear equation: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{g}{L} \\sin(\\theta) = 0 \\] import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.8 # Gravity (m/s^2) L = 1.0 # Length of pendulum (m) t_span = (0, 10) # Time span for simulation initial_conditions = [np.pi / 4, 0] # Initial conditions: [theta(0), theta'(0)] # Differential equation for the simple pendulum def simple_pendulum(t, y): theta, theta_dot = y dtheta_dt = theta_dot dtheta_dot_dt = - (g / L) * np.sin(theta) return [dtheta_dt, dtheta_dot_dt] # Solve using Runge-Kutta method solution = solve_ivp(simple_pendulum, t_span, initial_conditions, t_eval=np.linspace(0, 10, 1000)) # Extract solution t = solution.t theta = solution.y[0] theta_dot = solution.y[1] # Plot Angular Displacement vs Time plt.figure(figsize=(10, 6)) plt.plot(t, theta, label=\"Theta (rad)\") plt.title(\"Simple Pendulum Motion\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angular Displacement (rad)\") plt.grid(True) plt.legend() plt.show() # Plot Phase Portrait plt.figure(figsize=(8, 6)) plt.plot(theta, theta_dot) plt.title(\"Phase Portrait of the Simple Pendulum\") plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Theta' (rad/s)\") plt.grid(True) plt.show(","title":"7. Numerical Solution using Python"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"1. Differential Equation for Forced Damped Pendulum The general form of the equation of motion for a forced damped pendulum is: \\[ \\theta''(t) + \\gamma \\theta'(t) + \\omega_0^2 \\sin(\\theta(t)) = A \\cos(\\omega t) \\] Where: - \\(\\theta(t)\\) is the angular displacement of the pendulum as a function of time. - \\(\\gamma\\) is the damping coefficient (measuring the rate of energy dissipation). - \\(\\omega_0\\) is the natural frequency of the pendulum (without damping or external driving force). - \\(A\\) is the amplitude of the external driving force. - \\(\\omega\\) is the driving frequency of the external force. 2. Small-Angle Approximation For small oscillations where \\(\\theta(t)\\) is small (usually in radians), we can make the approximation: \\[ \\sin(\\theta(t)) \\approx \\theta(t) \\] This leads to the simplified linear equation: \\[ \\theta''(t) + \\gamma \\theta'(t) + \\omega_0^2 \\theta(t) = A \\cos(\\omega t) \\] This is a second-order linear ordinary differential equation with constant coefficients, which is much easier to solve. 3. Solution for the Undamped, Unforced Case (Free Pendulum) For the case when there is no damping ( \\(\\gamma = 0\\) ) and no external driving force ( \\(A = 0\\) ), the equation simplifies to: \\[ \\theta''(t) + \\omega_0^2 \\theta(t) = 0 \\] This is a simple harmonic oscillator, and its solution is: \\[ \\theta(t) = \\theta_0 \\cos(\\omega_0 t + \\phi) \\] Where: - \\(\\theta_0\\) is the initial amplitude. - \\(\\phi\\) is the phase constant determined by initial conditions. 4. Solution for the Damped, Unforced Case (Damped Pendulum) When we add damping but no external forcing (i.e., \\(A = 0\\) ), the equation becomes: \\[ \\theta''(t) + \\gamma \\theta'(t) + \\omega_0^2 \\theta(t) = 0 \\] The solution to this equation depends on the value of the damping coefficient \\(\\gamma\\) . It can be categorized as: Underdamped ( \\(\\gamma^2 < 4 \\omega_0^2\\) )**: The pendulum oscillates with exponentially decaying amplitude. Critically damped ( \\(\\gamma^2 = 4 \\omega_0^2\\) ) : The pendulum returns to equilibrium as quickly as possible without oscillating. Overdamped ( \\(\\gamma^2 > 4 \\omega_0^2\\) ) : The pendulum returns to equilibrium without oscillating, but slower than in the critically damped case. The solution for the underdamped case is: \\[ \\theta(t) = \\theta_0 e^{-\\gamma t / 2} \\cos(\\omega_d t + \\phi) \\] Where: - \\(\\omega_d = \\sqrt{\\omega_0^2 - \\left(\\frac{\\gamma}{2}\\right)^2}\\) is the damped frequency. - \\(\\theta_0\\) and \\(\\phi\\) are determined by initial conditions. - The exponential term \\(e^{-\\gamma t / 2}\\) represents the decaying amplitude. 5. Forced, Undamped Case (Driven Pendulum) When there is no damping ( \\(\\gamma = 0\\) ), but there is an external driving force, the equation becomes: \\[ \\theta''(t) + \\omega_0^2 \\theta(t) = A \\cos(\\omega t) \\] The solution to this equation is: \\[ \\theta(t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}} \\cos(\\omega t - \\delta) \\] Where: - \\(\\delta = \\tan^{-1}\\left(\\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) is the phase shift. - \\(A\\) is the driving amplitude. - \\(\\omega\\) is the driving frequency. - \\(\\omega_0\\) is the natural frequency of the pendulum. 6. Forced and Damped Case (Complete System) For the complete system with both damping and external driving force, the general solution is given by the combination of the transient and steady-state solutions: \\[ \\theta(t) = \\theta_{\\text{transient}}(t) + \\theta_{\\text{steady}}(t) \\] The transient part of the solution represents the initial conditions and will decay over time due to damping. The steady-state part of the solution represents the long-term behavior of the system, which oscillates with a constant amplitude at the driving frequency. For steady-state oscillations, the solution is: \\[ \\theta(t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}} \\cos(\\omega t - \\delta) \\] This shows how the system responds to the periodic driving force in the long run. 7. Energy Considerations The total mechanical energy \\(E(t)\\) of the system is the sum of the kinetic energy and the potential energy: \\[ E(t) = \\frac{1}{2} m l^2 \\left( \\theta'(t)^2 + \\omega_0^2 \\theta(t)^2 \\right) \\] Where: - \\(m\\) is the mass of the pendulum. - \\(l\\) is the length of the pendulum. - \\(\\theta'(t)\\) is the angular velocity. - \\(\\theta(t)\\) is the angular displacement. For the forced damped pendulum, the energy fluctuates due to the energy supplied by the external driving force and the energy dissipated by damping. At resonance ( \\(\\omega = \\omega_0\\) ), the energy absorption is maximized. 8. Resonance and Frequency Response In resonance, the system oscillates with maximum amplitude. The resonance condition occurs when the driving frequency \\(\\omega\\) equals the natural frequency \\(\\omega_0\\) . In this case, the amplitude of the oscillations grows, which can be expressed as: \\[ \\theta_{\\text{max}} = \\frac{A}{\\gamma \\omega_0} \\] This shows that resonance can lead to large oscillations, especially if the damping is small. If the damping is large, the resonance effect is reduced. Summary of Key Formulas Undamped, Free Pendulum (Simple Harmonic Motion) : $$ \\theta(t) = \\theta_0 \\cos(\\omega_0 t + \\phi) $$ Damped, Free Pendulum : $$ \\theta(t) = \\theta_0 e^{-\\gamma t / 2} \\cos(\\omega_d t + \\phi) $$ Forced, Damped Pendulum : $$ \\theta(t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}} \\cos(\\omega t - \\delta) $$ Energy : $$ E(t) = \\frac{1}{2} m l^2 \\left( \\theta'(t)^2 + \\omega_0^2 \\theta(t)^2 \\right) $$ Maximum Amplitude at Resonance : $$ \\theta_{\\text{max}} = \\frac{A}{\\gamma \\omega_0} $$ We'll use numerical methods to solve the differential equation for the forced damped pendulum. The script will use the solve_ivp function from SciPy to solve the system, and visualize the results with Matplotlib. Python Script for Simulating the Forced Damped Pendulum: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters gamma = 0.2 # Damping coefficient (can adjust for underdamped, overdamped cases) omega_0 = 2 # Natural frequency (rad/s) A = 1 # Amplitude of the driving force omega = 1.8 # Frequency of the driving force (change to test resonance behavior) t_span = (0, 100) # Time span for the simulation initial_conditions = [0.5, 0] # Initial conditions: [theta(0), theta'(0)] # Differential equation for the forced damped pendulum def forced_damped_pendulum(t, y): theta, theta_dot = y dtheta_dt = theta_dot dtheta_dot_dt = -gamma * theta_dot - omega_0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Solve the differential equation using Runge-Kutta method (via solve_ivp) solution = solve_ivp(forced_damped_pendulum, t_span, initial_conditions, t_eval=np.linspace(0, 100, 10000)) # Extract solution t = solution.t theta = solution.y[0] theta_dot = solution.y[1] # Plotting the solution: Angular displacement vs. Time plt.figure(figsize=(10, 6)) plt.plot(t, theta) plt.title('Forced Damped Pendulum Motion') plt.xlabel('Time (s)') plt.ylabel('Angular Displacement (rad)') plt.grid(True) plt.show() # Plotting the Phase Portrait: theta vs. theta' plt.figure(figsize=(8, 6)) plt.plot(theta, theta_dot) plt.title('Phase Portrait of the Forced Damped Pendulum') plt.xlabel('Theta (rad)') plt.ylabel('Theta\\' (rad/s)') plt.grid(True) plt.show() # Frequency Response: The steady-state amplitude vs driving frequency (if needed) # This could involve running simulations for different values of omega and plotting the resulting amplitude. def compute_amplitude(omega_values): amplitudes = [] for omega_val in omega_values: # Update the global omega global omega omega = omega_val solution = solve_ivp(forced_damped_pendulum, t_span, initial_conditions, t_eval=np.linspace(0, 100, 10000)) amplitudes.append(np.max(np.abs(solution.y[0]))) # Maximum amplitude observed in the solution return amplitudes omega_values = np.linspace(0.5, 2.5, 100) # Driving frequency range amplitudes = compute_amplitude(omega_values) # Plot Frequency Response plt.figure(figsize=(10, 6)) plt.plot(omega_values, amplitudes) plt.title('Frequency Response of the Forced Damped Pendulum') plt.xlabel('Driving Frequency (omega)') plt.ylabel('Maximum Amplitude (rad)') plt.grid(True) plt.show() Explanation of the Python Code : Parameters : gamma : Damping coefficient, controlling the rate at which energy is dissipated from the system. omega_0 : Natural frequency of the pendulum. A : Amplitude of the driving force. omega : Driving frequency of the external force. initial_conditions : The initial angular displacement ( \\(\\theta(0)\\) ) and angular velocity ( \\(\\theta'(0)\\) ). Forced Damped Pendulum Differential Equation : The function forced_damped_pendulum(t, y) represents the system of ordinary differential equations: $$ \\theta''(t) + \\gamma \\theta'(t) + \\omega_0^2 \\sin(\\theta(t)) = A \\cos(\\omega t) $$ We return the derivatives of \\(\\theta(t)\\) and \\(\\theta'(t)\\) in this function for numerical integration.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-differential-equation-for-forced-damped-pendulum","text":"The general form of the equation of motion for a forced damped pendulum is: \\[ \\theta''(t) + \\gamma \\theta'(t) + \\omega_0^2 \\sin(\\theta(t)) = A \\cos(\\omega t) \\] Where: - \\(\\theta(t)\\) is the angular displacement of the pendulum as a function of time. - \\(\\gamma\\) is the damping coefficient (measuring the rate of energy dissipation). - \\(\\omega_0\\) is the natural frequency of the pendulum (without damping or external driving force). - \\(A\\) is the amplitude of the external driving force. - \\(\\omega\\) is the driving frequency of the external force.","title":"1. Differential Equation for Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-small-angle-approximation","text":"For small oscillations where \\(\\theta(t)\\) is small (usually in radians), we can make the approximation: \\[ \\sin(\\theta(t)) \\approx \\theta(t) \\] This leads to the simplified linear equation: \\[ \\theta''(t) + \\gamma \\theta'(t) + \\omega_0^2 \\theta(t) = A \\cos(\\omega t) \\] This is a second-order linear ordinary differential equation with constant coefficients, which is much easier to solve.","title":"2. Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-solution-for-the-undamped-unforced-case-free-pendulum","text":"For the case when there is no damping ( \\(\\gamma = 0\\) ) and no external driving force ( \\(A = 0\\) ), the equation simplifies to: \\[ \\theta''(t) + \\omega_0^2 \\theta(t) = 0 \\] This is a simple harmonic oscillator, and its solution is: \\[ \\theta(t) = \\theta_0 \\cos(\\omega_0 t + \\phi) \\] Where: - \\(\\theta_0\\) is the initial amplitude. - \\(\\phi\\) is the phase constant determined by initial conditions.","title":"3. Solution for the Undamped, Unforced Case (Free Pendulum)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-solution-for-the-damped-unforced-case-damped-pendulum","text":"When we add damping but no external forcing (i.e., \\(A = 0\\) ), the equation becomes: \\[ \\theta''(t) + \\gamma \\theta'(t) + \\omega_0^2 \\theta(t) = 0 \\] The solution to this equation depends on the value of the damping coefficient \\(\\gamma\\) . It can be categorized as: Underdamped ( \\(\\gamma^2 < 4 \\omega_0^2\\) )**: The pendulum oscillates with exponentially decaying amplitude. Critically damped ( \\(\\gamma^2 = 4 \\omega_0^2\\) ) : The pendulum returns to equilibrium as quickly as possible without oscillating. Overdamped ( \\(\\gamma^2 > 4 \\omega_0^2\\) ) : The pendulum returns to equilibrium without oscillating, but slower than in the critically damped case. The solution for the underdamped case is: \\[ \\theta(t) = \\theta_0 e^{-\\gamma t / 2} \\cos(\\omega_d t + \\phi) \\] Where: - \\(\\omega_d = \\sqrt{\\omega_0^2 - \\left(\\frac{\\gamma}{2}\\right)^2}\\) is the damped frequency. - \\(\\theta_0\\) and \\(\\phi\\) are determined by initial conditions. - The exponential term \\(e^{-\\gamma t / 2}\\) represents the decaying amplitude.","title":"4. Solution for the Damped, Unforced Case (Damped Pendulum)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-forced-undamped-case-driven-pendulum","text":"When there is no damping ( \\(\\gamma = 0\\) ), but there is an external driving force, the equation becomes: \\[ \\theta''(t) + \\omega_0^2 \\theta(t) = A \\cos(\\omega t) \\] The solution to this equation is: \\[ \\theta(t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}} \\cos(\\omega t - \\delta) \\] Where: - \\(\\delta = \\tan^{-1}\\left(\\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) is the phase shift. - \\(A\\) is the driving amplitude. - \\(\\omega\\) is the driving frequency. - \\(\\omega_0\\) is the natural frequency of the pendulum.","title":"5. Forced, Undamped Case (Driven Pendulum)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-forced-and-damped-case-complete-system","text":"For the complete system with both damping and external driving force, the general solution is given by the combination of the transient and steady-state solutions: \\[ \\theta(t) = \\theta_{\\text{transient}}(t) + \\theta_{\\text{steady}}(t) \\] The transient part of the solution represents the initial conditions and will decay over time due to damping. The steady-state part of the solution represents the long-term behavior of the system, which oscillates with a constant amplitude at the driving frequency. For steady-state oscillations, the solution is: \\[ \\theta(t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}} \\cos(\\omega t - \\delta) \\] This shows how the system responds to the periodic driving force in the long run.","title":"6. Forced and Damped Case (Complete System)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#7-energy-considerations","text":"The total mechanical energy \\(E(t)\\) of the system is the sum of the kinetic energy and the potential energy: \\[ E(t) = \\frac{1}{2} m l^2 \\left( \\theta'(t)^2 + \\omega_0^2 \\theta(t)^2 \\right) \\] Where: - \\(m\\) is the mass of the pendulum. - \\(l\\) is the length of the pendulum. - \\(\\theta'(t)\\) is the angular velocity. - \\(\\theta(t)\\) is the angular displacement. For the forced damped pendulum, the energy fluctuates due to the energy supplied by the external driving force and the energy dissipated by damping. At resonance ( \\(\\omega = \\omega_0\\) ), the energy absorption is maximized.","title":"7. Energy Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#8-resonance-and-frequency-response","text":"In resonance, the system oscillates with maximum amplitude. The resonance condition occurs when the driving frequency \\(\\omega\\) equals the natural frequency \\(\\omega_0\\) . In this case, the amplitude of the oscillations grows, which can be expressed as: \\[ \\theta_{\\text{max}} = \\frac{A}{\\gamma \\omega_0} \\] This shows that resonance can lead to large oscillations, especially if the damping is small. If the damping is large, the resonance effect is reduced.","title":"8. Resonance and Frequency Response"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#summary-of-key-formulas","text":"Undamped, Free Pendulum (Simple Harmonic Motion) : $$ \\theta(t) = \\theta_0 \\cos(\\omega_0 t + \\phi) $$ Damped, Free Pendulum : $$ \\theta(t) = \\theta_0 e^{-\\gamma t / 2} \\cos(\\omega_d t + \\phi) $$ Forced, Damped Pendulum : $$ \\theta(t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}} \\cos(\\omega t - \\delta) $$ Energy : $$ E(t) = \\frac{1}{2} m l^2 \\left( \\theta'(t)^2 + \\omega_0^2 \\theta(t)^2 \\right) $$ Maximum Amplitude at Resonance : $$ \\theta_{\\text{max}} = \\frac{A}{\\gamma \\omega_0} $$ We'll use numerical methods to solve the differential equation for the forced damped pendulum. The script will use the solve_ivp function from SciPy to solve the system, and visualize the results with Matplotlib.","title":"Summary of Key Formulas"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-script-for-simulating-the-forced-damped-pendulum","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters gamma = 0.2 # Damping coefficient (can adjust for underdamped, overdamped cases) omega_0 = 2 # Natural frequency (rad/s) A = 1 # Amplitude of the driving force omega = 1.8 # Frequency of the driving force (change to test resonance behavior) t_span = (0, 100) # Time span for the simulation initial_conditions = [0.5, 0] # Initial conditions: [theta(0), theta'(0)] # Differential equation for the forced damped pendulum def forced_damped_pendulum(t, y): theta, theta_dot = y dtheta_dt = theta_dot dtheta_dot_dt = -gamma * theta_dot - omega_0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Solve the differential equation using Runge-Kutta method (via solve_ivp) solution = solve_ivp(forced_damped_pendulum, t_span, initial_conditions, t_eval=np.linspace(0, 100, 10000)) # Extract solution t = solution.t theta = solution.y[0] theta_dot = solution.y[1] # Plotting the solution: Angular displacement vs. Time plt.figure(figsize=(10, 6)) plt.plot(t, theta) plt.title('Forced Damped Pendulum Motion') plt.xlabel('Time (s)') plt.ylabel('Angular Displacement (rad)') plt.grid(True) plt.show() # Plotting the Phase Portrait: theta vs. theta' plt.figure(figsize=(8, 6)) plt.plot(theta, theta_dot) plt.title('Phase Portrait of the Forced Damped Pendulum') plt.xlabel('Theta (rad)') plt.ylabel('Theta\\' (rad/s)') plt.grid(True) plt.show() # Frequency Response: The steady-state amplitude vs driving frequency (if needed) # This could involve running simulations for different values of omega and plotting the resulting amplitude. def compute_amplitude(omega_values): amplitudes = [] for omega_val in omega_values: # Update the global omega global omega omega = omega_val solution = solve_ivp(forced_damped_pendulum, t_span, initial_conditions, t_eval=np.linspace(0, 100, 10000)) amplitudes.append(np.max(np.abs(solution.y[0]))) # Maximum amplitude observed in the solution return amplitudes omega_values = np.linspace(0.5, 2.5, 100) # Driving frequency range amplitudes = compute_amplitude(omega_values) # Plot Frequency Response plt.figure(figsize=(10, 6)) plt.plot(omega_values, amplitudes) plt.title('Frequency Response of the Forced Damped Pendulum') plt.xlabel('Driving Frequency (omega)') plt.ylabel('Maximum Amplitude (rad)') plt.grid(True) plt.show()","title":"Python Script for Simulating the Forced Damped Pendulum:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#explanation-of-the-python-code","text":"Parameters : gamma : Damping coefficient, controlling the rate at which energy is dissipated from the system. omega_0 : Natural frequency of the pendulum. A : Amplitude of the driving force. omega : Driving frequency of the external force. initial_conditions : The initial angular displacement ( \\(\\theta(0)\\) ) and angular velocity ( \\(\\theta'(0)\\) ). Forced Damped Pendulum Differential Equation : The function forced_damped_pendulum(t, y) represents the system of ordinary differential equations: $$ \\theta''(t) + \\gamma \\theta'(t) + \\omega_0^2 \\sin(\\theta(t)) = A \\cos(\\omega t) $$ We return the derivatives of \\(\\theta(t)\\) and \\(\\theta'(t)\\) in this function for numerical integration.","title":"Explanation of the Python Code:"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Orbital Period and Orbital Radius: Kepler's Third Law 1. Introduction Kepler's Third Law establishes a fundamental relationship between the orbital period \\(T\\) and the orbital radius \\(r\\) for celestial bodies in circular orbits: \\[ T^2 \\propto r^3 \\] This law allows astronomers to determine planetary masses and distances, providing a deep connection between Newtonian mechanics and celestial motions. 2. Derivation of Kepler's Third Law For a planet of mass \\(m\\) orbiting a much more massive central body of mass \\(M\\) , we consider Newton's second law and the gravitational force: \\[ F = m a = \\frac{G M m}{r^2} \\] For circular motion, the centripetal acceleration is given by: \\[ a = \\frac{v^2}{r} \\] Equating forces: \\[ \\frac{G M m}{r^2} = m \\frac{v^2}{r} \\] Canceling \\(m\\) and expressing velocity in terms of orbital period \\(T\\) : \\[ v = \\frac{2 \\pi r}{T} \\] Substituting: \\[ \\frac{G M}{r^2} = \\frac{(2 \\pi r / T)^2}{r} \\] Rearrange to obtain: \\[ T^2 = \\frac{4 \\pi^2}{G M} r^3 \\] This is the mathematical form of Kepler's Third Law for circular orbits. 3. Energy Considerations in Orbital Motion The total energy of a body in orbit is given by: \\[ E = K + U \\] where: Kinetic Energy : \\(K = \\frac{1}{2} m v^2\\) Gravitational Potential Energy : \\(U = - \\frac{G M m}{r}\\) Using \\(v^2 = \\frac{G M}{r}\\) from the previous derivation: \\[ K = \\frac{1}{2} m \\frac{G M}{r} = \\frac{G M m}{2r} \\] Thus, the total mechanical energy per unit mass is: \\[ E = \\frac{G M m}{2r} - \\frac{G M m}{r} = - \\frac{G M m}{2r} \\] This negative value indicates a bound orbit . 4. N-Body Orbital Motion Equations The motion of multiple celestial bodies is governed by coupled second-order differential equations: \\[ \\frac{d^2 r_i}{dt^2} = G \\sum_{j \\neq i} \\frac{m_j (r_j - r_i)}{|r_j - r_i|^3} \\] where \\(r_i\\) is the position of the \\(i\\) body and \\(m_j\\) is the mass of the \\(j\\) body. For relativistic corrections, we modify the classical period as: \\[ T_{rel} \\approx T_{classical} \\left( 1 + \\frac{c^2 a (1 - e^2)}{3 G M} \\right) \\] where \\(a\\) is the semi-major axis and \\(e\\) is the eccentricity. 5. Numerical Simulation of Circular Orbits We implement a Python simulation using Newton\u2019s laws and numerical integration. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of Earth (kg) R = 7e6 # Orbital radius (m) T_expected = 2 * np.pi * np.sqrt(R**3 / (G * M)) # Kepler's prediction # Equations of motion def orbit(t, y): x, vx, y, vy = y r = np.sqrt(x**2 + y**2) ax = -G * M * x / r**3 ay = -G * M * y / r**3 return [vx, ax, vy, ay] # Initial conditions x0, y0 = R, 0 # Start at x = R, y = 0 vx0, vy0 = 0, np.sqrt(G * M / R) # Circular velocity # Solve ODE solution = solve_ivp(orbit, [0, T_expected], [x0, vx0, y0, vy0], t_eval=np.linspace(0, T_expected, 1000)) # Extract solutions x, y = solution.y[0], solution.y[2] # Plot Orbit plt.figure(figsize=(6,6)) plt.plot(x, y, label='Orbital Path') plt.scatter(0, 0, color='red', label='Central Body') plt.xlabel(\"x position (m)\") plt.ylabel(\"y position (m)\") plt.legend() plt.title(\"Circular Orbit Simulation\") plt.grid() plt.show() 6. Verifying Kepler\u2019s Law Numerically We validate the relationship \\(T^2 \\propto r^3\\) by simulating orbits at different radii and computing periods. import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of Earth (kg) # Create an array of orbital radii radii = np.linspace(5e6, 1.5e7, 10) periods = [] # Calculate orbital period for each radius using Kepler's Third Law for R in radii: T = 2 * np.pi * np.sqrt(R**3 / (G * M)) # Period calculation using Kepler's law periods.append(T) # Fit a line to the log-log plot of radius vs period log_r = np.log(radii) log_T = np.log(periods) coeffs = np.polyfit(log_r, log_T, 1) # Plotting the log-log relationship plt.figure(figsize=(6, 4)) plt.plot(log_r, log_T, 'o-', label=f'Slope = {coeffs[0]:.2f}') plt.xlabel(\"log(Radius)\") # Label for x-axis plt.ylabel(\"log(Period)\") # Label for y-axis plt.title(\"Kepler's Third Law: Numerical Verification\") # Title for the plot plt.legend() # Show legend plt.grid() # Show grid plt.show() # Display the plot Explanation: We are calculating the orbital period \\(T\\) for various radii \\(r\\) using Kepler's Third Law: \\[T^2 = \\frac{4 \\pi^2}{G M} r^3\\] Then, we use a log-log plot to visualize the relationship between the logarithm of the radius and the logarithm of the period. We expect the slope of the line to be close to 1.5, which confirms Kepler's Third Law.","title":"Orbital Period and Orbital Radius: Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius-keplers-third-law","text":"","title":"Orbital Period and Orbital Radius: Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-introduction","text":"Kepler's Third Law establishes a fundamental relationship between the orbital period \\(T\\) and the orbital radius \\(r\\) for celestial bodies in circular orbits: \\[ T^2 \\propto r^3 \\] This law allows astronomers to determine planetary masses and distances, providing a deep connection between Newtonian mechanics and celestial motions.","title":"1. Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-derivation-of-keplers-third-law","text":"For a planet of mass \\(m\\) orbiting a much more massive central body of mass \\(M\\) , we consider Newton's second law and the gravitational force: \\[ F = m a = \\frac{G M m}{r^2} \\] For circular motion, the centripetal acceleration is given by: \\[ a = \\frac{v^2}{r} \\] Equating forces: \\[ \\frac{G M m}{r^2} = m \\frac{v^2}{r} \\] Canceling \\(m\\) and expressing velocity in terms of orbital period \\(T\\) : \\[ v = \\frac{2 \\pi r}{T} \\] Substituting: \\[ \\frac{G M}{r^2} = \\frac{(2 \\pi r / T)^2}{r} \\] Rearrange to obtain: \\[ T^2 = \\frac{4 \\pi^2}{G M} r^3 \\] This is the mathematical form of Kepler's Third Law for circular orbits.","title":"2. Derivation of Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-energy-considerations-in-orbital-motion","text":"The total energy of a body in orbit is given by: \\[ E = K + U \\] where: Kinetic Energy : \\(K = \\frac{1}{2} m v^2\\) Gravitational Potential Energy : \\(U = - \\frac{G M m}{r}\\) Using \\(v^2 = \\frac{G M}{r}\\) from the previous derivation: \\[ K = \\frac{1}{2} m \\frac{G M}{r} = \\frac{G M m}{2r} \\] Thus, the total mechanical energy per unit mass is: \\[ E = \\frac{G M m}{2r} - \\frac{G M m}{r} = - \\frac{G M m}{2r} \\] This negative value indicates a bound orbit .","title":"3. Energy Considerations in Orbital Motion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-n-body-orbital-motion-equations","text":"The motion of multiple celestial bodies is governed by coupled second-order differential equations: \\[ \\frac{d^2 r_i}{dt^2} = G \\sum_{j \\neq i} \\frac{m_j (r_j - r_i)}{|r_j - r_i|^3} \\] where \\(r_i\\) is the position of the \\(i\\) body and \\(m_j\\) is the mass of the \\(j\\) body. For relativistic corrections, we modify the classical period as: \\[ T_{rel} \\approx T_{classical} \\left( 1 + \\frac{c^2 a (1 - e^2)}{3 G M} \\right) \\] where \\(a\\) is the semi-major axis and \\(e\\) is the eccentricity.","title":"4. N-Body Orbital Motion Equations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-numerical-simulation-of-circular-orbits","text":"We implement a Python simulation using Newton\u2019s laws and numerical integration. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of Earth (kg) R = 7e6 # Orbital radius (m) T_expected = 2 * np.pi * np.sqrt(R**3 / (G * M)) # Kepler's prediction # Equations of motion def orbit(t, y): x, vx, y, vy = y r = np.sqrt(x**2 + y**2) ax = -G * M * x / r**3 ay = -G * M * y / r**3 return [vx, ax, vy, ay] # Initial conditions x0, y0 = R, 0 # Start at x = R, y = 0 vx0, vy0 = 0, np.sqrt(G * M / R) # Circular velocity # Solve ODE solution = solve_ivp(orbit, [0, T_expected], [x0, vx0, y0, vy0], t_eval=np.linspace(0, T_expected, 1000)) # Extract solutions x, y = solution.y[0], solution.y[2] # Plot Orbit plt.figure(figsize=(6,6)) plt.plot(x, y, label='Orbital Path') plt.scatter(0, 0, color='red', label='Central Body') plt.xlabel(\"x position (m)\") plt.ylabel(\"y position (m)\") plt.legend() plt.title(\"Circular Orbit Simulation\") plt.grid() plt.show()","title":"5. Numerical Simulation of Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#6-verifying-keplers-law-numerically","text":"We validate the relationship \\(T^2 \\propto r^3\\) by simulating orbits at different radii and computing periods. import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of Earth (kg) # Create an array of orbital radii radii = np.linspace(5e6, 1.5e7, 10) periods = [] # Calculate orbital period for each radius using Kepler's Third Law for R in radii: T = 2 * np.pi * np.sqrt(R**3 / (G * M)) # Period calculation using Kepler's law periods.append(T) # Fit a line to the log-log plot of radius vs period log_r = np.log(radii) log_T = np.log(periods) coeffs = np.polyfit(log_r, log_T, 1) # Plotting the log-log relationship plt.figure(figsize=(6, 4)) plt.plot(log_r, log_T, 'o-', label=f'Slope = {coeffs[0]:.2f}') plt.xlabel(\"log(Radius)\") # Label for x-axis plt.ylabel(\"log(Period)\") # Label for y-axis plt.title(\"Kepler's Third Law: Numerical Verification\") # Title for the plot plt.legend() # Show legend plt.grid() # Show grid plt.show() # Display the plot","title":"6. Verifying Kepler\u2019s Law Numerically"},{"location":"1%20Physics/2%20Gravity/Problem_1/#explanation","text":"We are calculating the orbital period \\(T\\) for various radii \\(r\\) using Kepler's Third Law: \\[T^2 = \\frac{4 \\pi^2}{G M} r^3\\] Then, we use a log-log plot to visualize the relationship between the logarithm of the radius and the logarithm of the period. We expect the slope of the line to be close to 1.5, which confirms Kepler's Third Law.","title":"Explanation:"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Escape Velocities and Cosmic Velocities 1. Introduction Escape velocity is the minimum velocity required for an object to escape the gravitational influence of a celestial body, without further propulsion. Beyond escape velocity, the object will not return to the body, assuming no other forces act on it (such as air resistance). There are also several types of cosmic velocities that define specific escape or orbiting conditions in a star system. First Cosmic Velocity ( \\(v_1\\) ) : The velocity required for an object to orbit the celestial body in a circular orbit. Second Cosmic Velocity ( \\(v_2\\) ) : The escape velocity, or the velocity required for an object to break free of a celestial body\u2019s gravitational pull. Third Cosmic Velocity ( \\(v_3\\) ) : The velocity required for an object to escape the gravitational influence of the entire star system. 2. Mathematical Derivations of Cosmic Velocities The formulas for these velocities are derived from Newtonian mechanics, specifically gravitational forces. First Cosmic Velocity ( \\(v_1\\) ) The first cosmic velocity is the velocity required for a body to enter a stable circular orbit around a celestial body. For a circular orbit, the centripetal force is provided by gravity: \\[F_{\\text{gravity}} = F_{\\text{centripetal}}\\] \\[\\frac{G M m}{r^2} = \\frac{m v_1^2}{r}\\] Where: \\(G\\) is the gravitational constant \\(M\\) is the mass of the celestial body (e.g., Earth) \\(m\\) is the mass of the object in orbit \\(r\\) is the radius of orbit \\(v_1\\) is the first cosmic velocity Canceling \\(m\\) from both sides: \\[v_1 = \\sqrt{\\frac{G M}{r}}\\] Second Cosmic Velocity ( \\(v_2\\) ) The second cosmic velocity is the escape velocity\u2014the minimum velocity required for an object to escape the gravitational pull of the celestial body. The energy required to escape is the sum of kinetic and potential energy. The total energy of the object at escape is zero (it reaches an infinite distance with zero velocity). The gravitational potential energy is: \\[U = -\\frac{G M m}{r}\\] The total mechanical energy at the escape point is zero: \\[\\frac{1}{2} m v_2^2 - \\frac{G M m}{r} = 0\\] Solving for \\(v_2\\) : \\[v_2 = \\sqrt{\\frac{2 G M}{r}}\\] Third Cosmic Velocity ( \\(v_3\\) ) The third cosmic velocity is the velocity required to escape the gravitational influence of an entire star system, such as the Sun\u2019s gravitational field. It can be derived from the escape velocity from the star system, considering the distance from the star\u2019s center (usually the distance from the Sun's center to Earth): \\[v_3 = \\sqrt{\\frac{2 G M_{\\text{star}}}{r_{\\text{star}}}}\\] Where: \\(M_{\\text{star}}\\) is the mass of the star (e.g., Sun) \\(r_{\\text{star}}\\) is the distance from the star\u2019s center (for instance, the distance from the Earth to the Sun) 3. Calculations for Different Celestial Bodies Let\u2019s calculate these velocities for Earth, Mars, and Jupiter. The formula for escape velocity and orbital velocity depends on the mass and radius of the celestial body. We will calculate the first and second cosmic velocities, using the following known values: Earth: Mass ( \\(M_{\\text{Earth}}\\) ): \\(5.972 \\times 10^{24} \\, \\text{kg}\\) Radius ( \\(R_{\\text{Earth}}\\) ): \\(6.371 \\times 10^{6} \\, \\text{m}\\) Mars: Mass ( \\(M_{\\text{Mars}}\\) ): \\(0.64171 \\times 10^{24} \\, \\text{kg}\\) Radius ( \\(R_{\\text{Mars}}\\) ): \\(3.396 \\times 10^{6} \\, \\text{m}\\) Jupiter: Mass ( \\(M_{\\text{Jupiter}}\\) ): \\(1.898 \\times 10^{27} \\, \\text{kg}\\) Radius ( \\(R_{\\text{Jupiter}}\\) ): \\(6.991 \\times 10^{7} \\, \\text{m}\\) Using these values, we will compute the first and second cosmic velocities. Advanced Concepts in Escape and Cosmic Velocities 1. Gravitational Potential Energy in a Non-Spherical Potential For non-spherical celestial bodies (e.g., rotating bodies like planets), the gravitational potential energy changes slightly due to the distribution of mass, particularly for objects that are not perfectly spherical. In such cases, the gravitational potential energy \\(U\\) at a distance \\(r\\) from the center of mass can be written as: \\[U = - \\frac{GMm}{r} \\left(1 + \\frac{1}{2} \\frac{r^2}{R_{\\text{eq}}^2} \\right)\\] Where: \\(R_{\\text{eq}}\\) is the equatorial radius of the planet. The term \\(\\frac{r^2}{R_{\\text{eq}}^2}\\) introduces a correction for the planet\u2019s oblateness (flattening at the poles). This formula helps in considering real celestial bodies where \\(r\\) is near the planet\u2019s equator or poles. 2. Relativistic Correction to Escape Velocity When objects move at speeds close to the speed of light, relativistic effects come into play. The relativistic escape velocity \\(v_{\\text{rel}}\\) is given by: \\[v_{\\text{rel}} = \\sqrt{\\frac{2GM}{r} \\left(1 + \\frac{v_{\\text{orbital}}^2}{c^2} \\right)}\\] Where: \\(v_{\\text{orbital}}\\) is the orbital velocity of the object in question. \\(c\\) is the speed of light. At low velocities (non-relativistic), this reduces to the classical escape velocity formula, but for high velocities, the correction term accounts for relativistic effects. 3. Generalized Third Cosmic Velocity The generalized third cosmic velocity \\(v_3\\) accounts for a system where the object must escape not just the gravitational influence of a single star but also overcome the combined gravitational potential of the entire galaxy. For a multi-body system, the escape velocity from a galactic center at a distance \\(r_{\\text{galaxy}}\\) is: \\[v_3 = \\sqrt{\\frac{2 G M_{\\text{galaxy}}}{r_{\\text{galaxy}}} \\left(1 + \\frac{v_{\\text{orbital}}^2}{c^2} \\right)}\\] Where: \\(M_{\\text{galaxy}}\\) is the mass of the galaxy. \\(r_{\\text{galaxy}}\\) is the distance from the galactic center. This formula considers the combined gravitational potential from the star system and the galactic center. 4. The Escape Velocity for a Rotating Body (Centrifugal Force Considerations) For rotating bodies such as Earth, centrifugal forces also play a role in determining the velocity required to escape. The escape velocity \\(v_{\\text{esc}}\\) at the surface of a rotating body, taking into account centrifugal forces at latitude \\(\\phi\\) , is given by: \\[v_{\\text{esc}} = \\sqrt{\\frac{2GM}{r} + \\omega^2 r^2 - 2\\omega r^2 \\sin \\phi \\cos \\phi}\\] Where: \\(\\omega\\) is the angular velocity of the celestial body. \\(r\\) is the radius at a specific latitude. \\(\\phi\\) is the latitude of the object from the axis of rotation (e.g., Earth's surface). This formula takes into account the reduced effective escape velocity due to the centrifugal force at the equator. 5. Gravitational Binding Energy of a Planet For a planet, the gravitational binding energy \\(E_b\\) , or the energy required to disperse a planet's mass to infinity, can be calculated by: \\[E_b = -\\frac{3}{5} \\frac{GM^2}{R}\\] Where: \\(M\\) is the mass of the planet. \\(R\\) is the radius of the planet. This formula provides an understanding of the energy scale needed to disrupt a planet\u2019s gravitational binding. 6. Cosmic Velocities of Earth, Mars, and Jupiter import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M_earth = 5.972e24 # Mass of Earth (kg) R_earth = 6.371e6 # Radius of Earth (m) M_mars = 6.39e23 # Mass of Mars (kg) R_mars = 3.390e6 # Radius of Mars (m) M_jupiter = 1.898e27 # Mass of Jupiter (kg) R_jupiter = 6.9911e7 # Radius of Jupiter (m) M_sun = 1.989e30 # Mass of Sun (kg) R_earthSun = 1.496e11 # Distance from earth to sun (m) earth_orbital_velocity = 29780 # earth orbital velocity m/s # Function to calculate first cosmic velocity def first_cosmic_velocity(mass, radius): return np.sqrt(G * mass / radius) # Function to calculate second cosmic velocity (escape velocity) def escape_velocity(mass, radius): return np.sqrt(2 * G * mass / radius) # Calculate velocities v1_earth = first_cosmic_velocity(M_earth, R_earth) v2_earth = escape_velocity(M_earth, R_earth) v1_mars = first_cosmic_velocity(M_mars, R_mars) v2_mars = escape_velocity(M_mars, R_mars) v1_jupiter = first_cosmic_velocity(M_jupiter, R_jupiter) v2_jupiter = escape_velocity(M_jupiter, R_jupiter) v_sunEscape = escape_velocity(M_sun, R_earthSun) v3_earth = np.sqrt(v_sunEscape**2 + earth_orbital_velocity**2) - earth_orbital_velocity # Print results print(f\"Earth: v1 = {v1_earth/1000:.2f} km/s, v2 = {v2_earth/1000:.2f} km/s\") print(f\"Mars: v1 = {v1_mars/1000:.2f} km/s, v2 = {v2_mars/1000:.2f} km/s\") print(f\"Jupiter: v1 = {v1_jupiter/1000:.2f} km/s, v2 = {v2_jupiter/1000:.2f} km/s\") print(f\"Earth: v3 = {v3_earth/1000:.2f} km/s\") # Visualization bodies = ['Earth', 'Mars', 'Jupiter'] v1_values = [v1_earth/1000, v1_mars/1000, v1_jupiter/1000] v2_values = [v2_earth/1000, v2_mars/1000, v2_jupiter/1000] plt.figure(figsize=(10, 6)) plt.bar(bodies, v1_values, label='First Cosmic Velocity (km/s)', alpha=0.7) plt.bar(bodies, v2_values, label='Escape Velocity (km/s)', alpha=0.7) plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Various Celestial Bodies') plt.legend() plt.show() 7. Cosmic Velocities and Escape Velocity Visualizations import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) c = 299792458 # Speed of light (m/s) M_earth = 5.972e24 # Mass of Earth (kg) R_earth = 6.371e6 # Radius of Earth (m) earth_angular_velocity = 7.27e-5 # Earth's angular velocity (rad/s) # Function to calculate first cosmic velocity def first_cosmic_velocity(mass, radius): return np.sqrt(G * mass / radius) # Function to calculate second cosmic velocity (escape velocity) def escape_velocity(mass, radius): return np.sqrt(2 * G * mass / radius) # Function to calculate relativistic escape velocity def relativistic_escape_velocity(mass, radius): return c * np.sqrt(1 - (1 + 2 * G * mass / (radius * c**2))**-2) # Function to calculate escape velocity in a rotating frame def rotating_escape_velocity(mass, radius, angular_velocity): rotational_velocity = angular_velocity * radius return np.sqrt(2 * G * mass / radius - rotational_velocity**2) # Calculate velocities for Earth v1_earth = first_cosmic_velocity(M_earth, R_earth) v2_earth = escape_velocity(M_earth, R_earth) v_esc_rel_earth = relativistic_escape_velocity(M_earth, R_earth) v_esc_rot_earth = rotating_escape_velocity(M_earth, R_earth, earth_angular_velocity) # Create a bar chart for comparison velocities = { 'First Cosmic': v1_earth / 1000, 'Classical Escape': v2_earth / 1000, 'Relativistic Escape': v_esc_rel_earth / 1000, 'Rotating Escape': v_esc_rot_earth / 1000, } plt.figure(figsize=(10, 6)) plt.bar(velocities.keys(), velocities.values()) plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Earth') plt.show() # Example: Escape Velocity vs. Radius radii = np.linspace(R_earth, 10 * R_earth, 100) classical_escape = escape_velocity(M_earth, radii) / 1000 relativistic_escape = relativistic_escape_velocity(M_earth, radii) / 1000 plt.figure(figsize=(10, 6)) plt.plot(radii / R_earth, classical_escape, label='Classical Escape') plt.plot(radii / R_earth, relativistic_escape, label='Relativistic Escape') plt.xlabel('Radius (multiples of Earth radius)') plt.ylabel('Escape Velocity (km/s)') plt.title('Escape Velocity vs. Radius') plt.legend() plt.show() # Example: Escape Velocity vs. Angular Velocity angular_velocities = np.linspace(0, 2 * earth_angular_velocity, 100) rotating_escape = rotating_escape_velocity(M_earth, R_earth, angular_velocities) / 1000 plt.figure(figsize=(10, 6)) plt.plot(angular_velocities / earth_angular_velocity, rotating_escape, label='Rotating Escape') plt.xlabel('Angular Velocity (multiples of Earth angular velocity)') plt.ylabel('Escape Velocity (km/s)') plt.title('Escape Velocity vs. Angular Velocity') plt.legend() plt.show()","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-introduction","text":"Escape velocity is the minimum velocity required for an object to escape the gravitational influence of a celestial body, without further propulsion. Beyond escape velocity, the object will not return to the body, assuming no other forces act on it (such as air resistance). There are also several types of cosmic velocities that define specific escape or orbiting conditions in a star system. First Cosmic Velocity ( \\(v_1\\) ) : The velocity required for an object to orbit the celestial body in a circular orbit. Second Cosmic Velocity ( \\(v_2\\) ) : The escape velocity, or the velocity required for an object to break free of a celestial body\u2019s gravitational pull. Third Cosmic Velocity ( \\(v_3\\) ) : The velocity required for an object to escape the gravitational influence of the entire star system.","title":"1. Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-mathematical-derivations-of-cosmic-velocities","text":"The formulas for these velocities are derived from Newtonian mechanics, specifically gravitational forces.","title":"2. Mathematical Derivations of Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity-v_1","text":"The first cosmic velocity is the velocity required for a body to enter a stable circular orbit around a celestial body. For a circular orbit, the centripetal force is provided by gravity: \\[F_{\\text{gravity}} = F_{\\text{centripetal}}\\] \\[\\frac{G M m}{r^2} = \\frac{m v_1^2}{r}\\] Where: \\(G\\) is the gravitational constant \\(M\\) is the mass of the celestial body (e.g., Earth) \\(m\\) is the mass of the object in orbit \\(r\\) is the radius of orbit \\(v_1\\) is the first cosmic velocity Canceling \\(m\\) from both sides: \\[v_1 = \\sqrt{\\frac{G M}{r}}\\]","title":"First Cosmic Velocity (\\(v_1\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity-v_2","text":"The second cosmic velocity is the escape velocity\u2014the minimum velocity required for an object to escape the gravitational pull of the celestial body. The energy required to escape is the sum of kinetic and potential energy. The total energy of the object at escape is zero (it reaches an infinite distance with zero velocity). The gravitational potential energy is: \\[U = -\\frac{G M m}{r}\\] The total mechanical energy at the escape point is zero: \\[\\frac{1}{2} m v_2^2 - \\frac{G M m}{r} = 0\\] Solving for \\(v_2\\) : \\[v_2 = \\sqrt{\\frac{2 G M}{r}}\\]","title":"Second Cosmic Velocity (\\(v_2\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-v_3","text":"The third cosmic velocity is the velocity required to escape the gravitational influence of an entire star system, such as the Sun\u2019s gravitational field. It can be derived from the escape velocity from the star system, considering the distance from the star\u2019s center (usually the distance from the Sun's center to Earth): \\[v_3 = \\sqrt{\\frac{2 G M_{\\text{star}}}{r_{\\text{star}}}}\\] Where: \\(M_{\\text{star}}\\) is the mass of the star (e.g., Sun) \\(r_{\\text{star}}\\) is the distance from the star\u2019s center (for instance, the distance from the Earth to the Sun)","title":"Third Cosmic Velocity (\\(v_3\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-calculations-for-different-celestial-bodies","text":"Let\u2019s calculate these velocities for Earth, Mars, and Jupiter. The formula for escape velocity and orbital velocity depends on the mass and radius of the celestial body. We will calculate the first and second cosmic velocities, using the following known values: Earth: Mass ( \\(M_{\\text{Earth}}\\) ): \\(5.972 \\times 10^{24} \\, \\text{kg}\\) Radius ( \\(R_{\\text{Earth}}\\) ): \\(6.371 \\times 10^{6} \\, \\text{m}\\) Mars: Mass ( \\(M_{\\text{Mars}}\\) ): \\(0.64171 \\times 10^{24} \\, \\text{kg}\\) Radius ( \\(R_{\\text{Mars}}\\) ): \\(3.396 \\times 10^{6} \\, \\text{m}\\) Jupiter: Mass ( \\(M_{\\text{Jupiter}}\\) ): \\(1.898 \\times 10^{27} \\, \\text{kg}\\) Radius ( \\(R_{\\text{Jupiter}}\\) ): \\(6.991 \\times 10^{7} \\, \\text{m}\\) Using these values, we will compute the first and second cosmic velocities.","title":"3. Calculations for Different Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#advanced-concepts-in-escape-and-cosmic-velocities","text":"","title":"Advanced Concepts in Escape and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-gravitational-potential-energy-in-a-non-spherical-potential","text":"For non-spherical celestial bodies (e.g., rotating bodies like planets), the gravitational potential energy changes slightly due to the distribution of mass, particularly for objects that are not perfectly spherical. In such cases, the gravitational potential energy \\(U\\) at a distance \\(r\\) from the center of mass can be written as: \\[U = - \\frac{GMm}{r} \\left(1 + \\frac{1}{2} \\frac{r^2}{R_{\\text{eq}}^2} \\right)\\] Where: \\(R_{\\text{eq}}\\) is the equatorial radius of the planet. The term \\(\\frac{r^2}{R_{\\text{eq}}^2}\\) introduces a correction for the planet\u2019s oblateness (flattening at the poles). This formula helps in considering real celestial bodies where \\(r\\) is near the planet\u2019s equator or poles.","title":"1. Gravitational Potential Energy in a Non-Spherical Potential"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-relativistic-correction-to-escape-velocity","text":"When objects move at speeds close to the speed of light, relativistic effects come into play. The relativistic escape velocity \\(v_{\\text{rel}}\\) is given by: \\[v_{\\text{rel}} = \\sqrt{\\frac{2GM}{r} \\left(1 + \\frac{v_{\\text{orbital}}^2}{c^2} \\right)}\\] Where: \\(v_{\\text{orbital}}\\) is the orbital velocity of the object in question. \\(c\\) is the speed of light. At low velocities (non-relativistic), this reduces to the classical escape velocity formula, but for high velocities, the correction term accounts for relativistic effects.","title":"2. Relativistic Correction to Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-generalized-third-cosmic-velocity","text":"The generalized third cosmic velocity \\(v_3\\) accounts for a system where the object must escape not just the gravitational influence of a single star but also overcome the combined gravitational potential of the entire galaxy. For a multi-body system, the escape velocity from a galactic center at a distance \\(r_{\\text{galaxy}}\\) is: \\[v_3 = \\sqrt{\\frac{2 G M_{\\text{galaxy}}}{r_{\\text{galaxy}}} \\left(1 + \\frac{v_{\\text{orbital}}^2}{c^2} \\right)}\\] Where: \\(M_{\\text{galaxy}}\\) is the mass of the galaxy. \\(r_{\\text{galaxy}}\\) is the distance from the galactic center. This formula considers the combined gravitational potential from the star system and the galactic center.","title":"3. Generalized Third Cosmic Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-the-escape-velocity-for-a-rotating-body-centrifugal-force-considerations","text":"For rotating bodies such as Earth, centrifugal forces also play a role in determining the velocity required to escape. The escape velocity \\(v_{\\text{esc}}\\) at the surface of a rotating body, taking into account centrifugal forces at latitude \\(\\phi\\) , is given by: \\[v_{\\text{esc}} = \\sqrt{\\frac{2GM}{r} + \\omega^2 r^2 - 2\\omega r^2 \\sin \\phi \\cos \\phi}\\] Where: \\(\\omega\\) is the angular velocity of the celestial body. \\(r\\) is the radius at a specific latitude. \\(\\phi\\) is the latitude of the object from the axis of rotation (e.g., Earth's surface). This formula takes into account the reduced effective escape velocity due to the centrifugal force at the equator.","title":"4. The Escape Velocity for a Rotating Body (Centrifugal Force Considerations)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#5-gravitational-binding-energy-of-a-planet","text":"For a planet, the gravitational binding energy \\(E_b\\) , or the energy required to disperse a planet's mass to infinity, can be calculated by: \\[E_b = -\\frac{3}{5} \\frac{GM^2}{R}\\] Where: \\(M\\) is the mass of the planet. \\(R\\) is the radius of the planet. This formula provides an understanding of the energy scale needed to disrupt a planet\u2019s gravitational binding.","title":"5. Gravitational Binding Energy of a Planet"},{"location":"1%20Physics/2%20Gravity/Problem_2/#6-cosmic-velocities-of-earth-mars-and-jupiter","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M_earth = 5.972e24 # Mass of Earth (kg) R_earth = 6.371e6 # Radius of Earth (m) M_mars = 6.39e23 # Mass of Mars (kg) R_mars = 3.390e6 # Radius of Mars (m) M_jupiter = 1.898e27 # Mass of Jupiter (kg) R_jupiter = 6.9911e7 # Radius of Jupiter (m) M_sun = 1.989e30 # Mass of Sun (kg) R_earthSun = 1.496e11 # Distance from earth to sun (m) earth_orbital_velocity = 29780 # earth orbital velocity m/s # Function to calculate first cosmic velocity def first_cosmic_velocity(mass, radius): return np.sqrt(G * mass / radius) # Function to calculate second cosmic velocity (escape velocity) def escape_velocity(mass, radius): return np.sqrt(2 * G * mass / radius) # Calculate velocities v1_earth = first_cosmic_velocity(M_earth, R_earth) v2_earth = escape_velocity(M_earth, R_earth) v1_mars = first_cosmic_velocity(M_mars, R_mars) v2_mars = escape_velocity(M_mars, R_mars) v1_jupiter = first_cosmic_velocity(M_jupiter, R_jupiter) v2_jupiter = escape_velocity(M_jupiter, R_jupiter) v_sunEscape = escape_velocity(M_sun, R_earthSun) v3_earth = np.sqrt(v_sunEscape**2 + earth_orbital_velocity**2) - earth_orbital_velocity # Print results print(f\"Earth: v1 = {v1_earth/1000:.2f} km/s, v2 = {v2_earth/1000:.2f} km/s\") print(f\"Mars: v1 = {v1_mars/1000:.2f} km/s, v2 = {v2_mars/1000:.2f} km/s\") print(f\"Jupiter: v1 = {v1_jupiter/1000:.2f} km/s, v2 = {v2_jupiter/1000:.2f} km/s\") print(f\"Earth: v3 = {v3_earth/1000:.2f} km/s\") # Visualization bodies = ['Earth', 'Mars', 'Jupiter'] v1_values = [v1_earth/1000, v1_mars/1000, v1_jupiter/1000] v2_values = [v2_earth/1000, v2_mars/1000, v2_jupiter/1000] plt.figure(figsize=(10, 6)) plt.bar(bodies, v1_values, label='First Cosmic Velocity (km/s)', alpha=0.7) plt.bar(bodies, v2_values, label='Escape Velocity (km/s)', alpha=0.7) plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Various Celestial Bodies') plt.legend() plt.show()","title":"6. Cosmic Velocities of Earth, Mars, and Jupiter"},{"location":"1%20Physics/2%20Gravity/Problem_2/#7-cosmic-velocities-and-escape-velocity-visualizations","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) c = 299792458 # Speed of light (m/s) M_earth = 5.972e24 # Mass of Earth (kg) R_earth = 6.371e6 # Radius of Earth (m) earth_angular_velocity = 7.27e-5 # Earth's angular velocity (rad/s) # Function to calculate first cosmic velocity def first_cosmic_velocity(mass, radius): return np.sqrt(G * mass / radius) # Function to calculate second cosmic velocity (escape velocity) def escape_velocity(mass, radius): return np.sqrt(2 * G * mass / radius) # Function to calculate relativistic escape velocity def relativistic_escape_velocity(mass, radius): return c * np.sqrt(1 - (1 + 2 * G * mass / (radius * c**2))**-2) # Function to calculate escape velocity in a rotating frame def rotating_escape_velocity(mass, radius, angular_velocity): rotational_velocity = angular_velocity * radius return np.sqrt(2 * G * mass / radius - rotational_velocity**2) # Calculate velocities for Earth v1_earth = first_cosmic_velocity(M_earth, R_earth) v2_earth = escape_velocity(M_earth, R_earth) v_esc_rel_earth = relativistic_escape_velocity(M_earth, R_earth) v_esc_rot_earth = rotating_escape_velocity(M_earth, R_earth, earth_angular_velocity) # Create a bar chart for comparison velocities = { 'First Cosmic': v1_earth / 1000, 'Classical Escape': v2_earth / 1000, 'Relativistic Escape': v_esc_rel_earth / 1000, 'Rotating Escape': v_esc_rot_earth / 1000, } plt.figure(figsize=(10, 6)) plt.bar(velocities.keys(), velocities.values()) plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Earth') plt.show() # Example: Escape Velocity vs. Radius radii = np.linspace(R_earth, 10 * R_earth, 100) classical_escape = escape_velocity(M_earth, radii) / 1000 relativistic_escape = relativistic_escape_velocity(M_earth, radii) / 1000 plt.figure(figsize=(10, 6)) plt.plot(radii / R_earth, classical_escape, label='Classical Escape') plt.plot(radii / R_earth, relativistic_escape, label='Relativistic Escape') plt.xlabel('Radius (multiples of Earth radius)') plt.ylabel('Escape Velocity (km/s)') plt.title('Escape Velocity vs. Radius') plt.legend() plt.show() # Example: Escape Velocity vs. Angular Velocity angular_velocities = np.linspace(0, 2 * earth_angular_velocity, 100) rotating_escape = rotating_escape_velocity(M_earth, R_earth, angular_velocities) / 1000 plt.figure(figsize=(10, 6)) plt.plot(angular_velocities / earth_angular_velocity, rotating_escape, label='Rotating Escape') plt.xlabel('Angular Velocity (multiples of Earth angular velocity)') plt.ylabel('Escape Velocity (km/s)') plt.title('Escape Velocity vs. Angular Velocity') plt.legend() plt.show()","title":"7. Cosmic Velocities and Escape Velocity Visualizations"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}